{
  "name": "hot-shots",
  "description": "Node.js client for StatsD, DogStatsD, and Telegraf",
  "version": "2.3.0",
  "author": {
    "name": "Steve Ivy"
  },
  "contributors": [
    {
      "name": "Russ Bradberry",
      "email": "rbradberry@gmail.com"
    },
    {
      "name": "Brian Deitte",
      "email": "bdeitte@gmail.com"
    }
  ],
  "keywords": [
    "statsd",
    "dogstatsd",
    "datadog",
    "metrics",
    "telegraf"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/brightcove/hot-shots.git"
  },
  "bugs": {
    "url": "https://github.com/brightcove/hot-shots/issues"
  },
  "directories": {
    "lib": "./lib/"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "scripts": {
    "test": "mocha -R spec",
    "lint": "jshint lib/**.js test/**.js",
    "pretest": "npm run lint"
  },
  "dependencies": {},
  "devDependencies": {
    "jshint": "2.x",
    "mocha": "2.x"
  },
  "license": "MIT",
  "readme": "# hot-shots\n\nA Node.js client for [Etsy](http://etsy.com)'s [StatsD](https://github.com/etsy/statsd) server, Datadog's [DogStatsD](http://docs.datadoghq.com/guides/dogstatsd/) server, and [InfluxDB's](http://influxdb.com) [Telegraf](https://github.com/influxdb/telegraf) StatsD server.\n\nThis project is a fork off of [node-statsd](https://github.com/sivy/node-statsd).  This project includes all changes in node-statsd, all open PRs to node-statsd when possible, and some additional goodies (like Telegraf support).\n\n[![Build Status](https://secure.travis-ci.org/brightcove/hot-shots.png?branch=master)](http://travis-ci.org/brightcove/hot-shots)\n\n## Installation\n\n```\n$ npm install hot-shots\n```\n\n## Usage\n\nAll initialization parameters are optional.\n\nParameters (specified as an options hash):\n* `host`:        The host to send stats to `default: localhost`\n* `port`:        The port to send stats to `default: 8125`\n* `prefix`:      What to prefix each stat name with `default: ''`\n* `suffix`:      What to suffix each stat name with `default: ''`\n* `globalize`:   Expose this StatsD instance globally? `default: false`\n* `cacheDns`:    Cache the initial dns lookup to *host* `default: false`\n* `mock`:        Create a mock StatsD instance, sending no stats to the server? `default: false`\n* `globalTags`:  Tags that will be added to every metric `default: []`\n* `maxBufferSize`: If larger than 0,  metrics will be buffered and only sent when the string length is greater than the size. `default: 0`\n* `bufferFlushInterval`: If buffering is in use, this is the time in ms to always flush any buffered metrics. `default: 1000`\n* `telegraf`:    Use Telegraf's StatsD line protocol, which is slightly different than the rest `default: false`\n\nAll StatsD methods other than event and close have the same API:\n* `name`:       Stat name `required`\n* `value`:      Stat value `required except in increment/decrement where it defaults to 1/-1 respectively`\n* `sampleRate`: Sends only a sample of data to StatsD `default: 1`\n* `tags`:       The Array of tags to add to metrics `default: []`\n* `callback`:   The callback to execute once the metric has been sent or buffered\n\nIf an array is specified as the `name` parameter each item in that array will be sent along with the specified value.\n\nThe close method has the following API:\n\n* `callback`:   The callback to execute once close is complete.  All other calls to statsd will fail once this is called.\n\nThe event method has the following API:\n\n* `title`:       Event title `required`\n* `text`:        Event description `default is title`\n* `options`:     Options for the event\n  * `date_happened`    Assign a timestamp to the event `default is now`\n  * `hostname`         Assign a hostname to the event.\n  * `aggregation_key`  Assign an aggregation key to the event, to group it with some others.\n  * `priority`         Can be ‘normal’ or ‘low’ `default: normal`\n  * `source_type_name` Assign a source type to the event.\n  * `alert_type`       Can be ‘error’, ‘warning’, ‘info’ or ‘success’ `default: info`\n* `tags`:       The Array of tags to add to metrics `default: []`\n* `callback`:   The callback to execute once the metric has been sent.\n\n```javascript\n  var StatsD = require('hot-shots'),\n      client = new StatsD();\n\n  // Catch socket errors so they don't go unhandled, as explained\n  // in the Errors section below\n  client.socket.on('error', function(error) {\n    console.error(\"Error in socket: \", error);\n  });\n\n  // Timing: sends a timing command with the specified milliseconds\n  client.timing('response_time', 42);\n\n  // Increment: Increments a stat by a value (default is 1)\n  client.increment('my_counter');\n\n  // Decrement: Decrements a stat by a value (default is -1)\n  client.decrement('my_counter');\n\n  // Histogram: send data for histogram stat (DataDog and Telegraf only)\n  client.histogram('my_histogram', 42);\n\n  // Gauge: Gauge a stat by a specified amount\n  client.gauge('my_gauge', 123.45);\n\n  // Set: Counts unique occurrences of a stat (alias of unique)\n  client.set('my_unique', 'foobar');\n  client.unique('my_unique', 'foobarbaz');\n\n  // Event: sends the titled event (DataDog only)\n  client.event('my_title', 'description');\n\n  // Incrementing multiple items\n  client.increment(['these', 'are', 'different', 'stats']);\n\n  // Sampling, this will sample 25% of the time the StatsD Daemon will compensate for sampling\n  client.increment('my_counter', 1, 0.25);\n\n  // Tags, this will add user-defined tags to the data (DataDog and Telegraf only)\n  client.histogram('my_histogram', 42, ['foo', 'bar']);\n\n  // Using the callback.  This is the same format for the callback\n  // with all non-close calls\n  client.set(['foo', 'bar'], 42, function(error, bytes){\n    //this only gets called once after all messages have been sent\n    if(error){\n      console.error('Oh noes! There was an error:', error);\n    } else {\n      console.log('Successfully sent', bytes, 'bytes');\n    }\n  });\n\n  // Sampling, tags and callback are optional and could be used in any combination (DataDog and Telegraf only)\n  client.histogram('my_histogram', 42, 0.25); // 25% Sample Rate\n  client.histogram('my_histogram', 42, ['tag']); // User-defined tag\n  client.histogram('my_histogram', 42, next); // Callback\n  client.histogram('my_histogram', 42, 0.25, ['tag']);\n  client.histogram('my_histogram', 42, 0.25, next);\n  client.histogram('my_histogram', 42, ['tag'], next);\n  client.histogram('my_histogram', 42, 0.25, ['tag'], next);\n\n  // Close statsd.  This will ensure all stats are sent and stop statsd\n  // from doing anything more.\n  client.close(function(err) {\n    console.log('The close did not work quite right: ', err);\n  });\n```\n\n## DogStatsD and Telegraf functionality\n\nSome of the functionality mentioned above is specific to DogStatsD or Telegraf.  They will not do anything if you are using the regular statsd client.\n* globalTags parameter- DogStatsD or Telegraf\n* tags parameter- DogStatsD or Telegraf\n* telegraf parameter- Telegraf\n* histogram method- DogStatsD or Telegraf\n* event method- DogStatsD\n\n## Errors\n\nAs usual, callbacks will have an error as their first parameter.  You can have an error in both the message and close callbacks.\n\nIn the event that there is a socket error, `hot-shots` will allow this error to bubble up.  If you would like to catch the errors, just attach a listener to the socket property on the instance.\n\n```javascript\nclient.socket.on('error', function(error) {\n  console.error(\"Error in socket: \", error);\n});\n```\n\n## Submitting changes\n\nThanks for considering making any updates to this project!  Here are the steps to take in your fork:\n\n1. Run \"npm install\"\n2. Add your changes in your fork as well as any new tests needed\n3. Run \"npm test\"\n4. Update the HEAD section in CHANGES.md with a description of what you have done\n5. Push your changes and create the PR\n\nWhen you've done all this we're happy to try to get this merged in right away.\n\n## Name\n\nWhy is this project named hot-shots?  Because:\n\n1. It's impossible to find another statsd name on npm\n2. It's the name of a dumb movie\n3. No good reason\n\n## License\n\nhot-shots is licensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "hot-shots@2.3.0",
  "dist": {
    "shasum": "0960abcf92939fb79146c5b6ce66cfa27855b787"
  },
  "_from": "hot-shots@^2.2.0",
  "_resolved": "https://registry.npmjs.org/hot-shots/-/hot-shots-2.3.0.tgz"
}
