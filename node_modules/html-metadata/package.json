{
  "name": "html-metadata",
  "version": "1.2.1",
  "description": "Scrapes metadata of several different standards",
  "main": "index.js",
  "dependencies": {
    "bluebird": "2.8.2",
    "cheerio": "0.19.0",
    "microdata-node": "0.1.2",
    "preq": "0.3.13"
  },
  "devDependencies": {
    "assert": "1.3.0",
    "istanbul": "0.3.5",
    "mocha": "2.2.4",
    "mocha-jshint": "0.0.9",
    "mocha-lcov-reporter": "0.0.1"
  },
  "scripts": {
    "test": "mocha",
    "coverage": "istanbul cover _mocha -- -R spec"
  },
  "keywords": [
    "open graph",
    "metadata",
    "microdata",
    "dublin core",
    "web scraper"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/wikimedia/html-metadata.git"
  },
  "author": {
    "name": "Marielle Volz",
    "email": "marielle.volz@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/wikimedia/html-metadata/issues"
  },
  "homepage": "https://github.com/wikimedia/html-metadata",
  "readme": "html-metadata\n=============\n\n# MetaData html scraper and parser for Node.js (supports Promises and callback style)\n\nThe aim of this library is to be a comprehensive source for extracting all html embedded metadata. Currently it supports Schema.org microdata using a third party library, a native Dublin Core, Open Graph, and COinS implementation, and some general metadata that doesn't belong to a particular standard (for instance, the content of the title tag, or meta description tags).\n\nPlanned is support for RDFa , twitter, AGLS, eprints, highwire, BEPress and other yet unheard of metadata types. Contributions and requests for other metadata types welcome!\n\n## Install\n\n\tnpm install git://github.com/mvolz/html-metadata.git\n\n## Usage\n\nPromise-based:\n\n```js\nvar scrape = require('html-metadata');\n\nvar url = \"http://blog.woorank.com/2013/04/dublin-core-metadata-for-seo-and-usability/\";\n\nscrape(url).then(function(metadata){\n\tconsole.log(metadata);\n});\n```\n\nCallback-based:\n\n```js\nvar scrape = require('html-metadata');\n\nvar url = \"http://blog.woorank.com/2013/04/dublin-core-metadata-for-seo-and-usability/\";\n\nscrape(url, function(error, metadata){\n\tconsole.log(metadata);\n});\n```\n\nThe scrape method used here invokes the parseAll() method, which uses all the available methods registered in method metadataFunctions(), and are available for use separately as well, for example:\n\nPromise-based:\n```js\nvar cheerio = require('cheerio');\nvar preq = require('preq'); // Promisified request library\nvar dublinCore = require('html-metadata').parseDublinCore;\n\nvar url = \"http://blog.woorank.com/2013/04/dublin-core-metadata-for-seo-and-usability/\";\n\npreq(url).then(function(response){\n\t$ = cheerio.load(response.body);\n\treturn parseDublinCore($).then(function(metadata){\n\t\tconsole.log(metadata);\n\t});\n});\n```\n\nCallback-based:\n```js\nvar cheerio = require('cheerio');\nvar request = require('request');\nvar dublinCore = require('html-metadata').parseDublinCore;\n\nvar url = \"http://blog.woorank.com/2013/04/dublin-core-metadata-for-seo-and-usability/\";\n\nrequest(url, function(error, response, html){\n\t$ = cheerio.load(html);\n\tparseDublinCore($, function(error, metadata){\n\t\tconsole.log(metadata);\n\t});\n});\n```\nThe method parseGeneral obtains the following general metadata:\n\n```html\n<meta name=\"author\" content=\"\">\n<link rel=\"author\" href=\"\">\n<link rel=\"canonical\" href=\"\">\n<meta name =\"description\" content=\"\">\n<link rel=\"publisher\" href=\"\">\n<meta name =\"robots\" content=\"\">\n<link rel=\"shortlink\" href=\"\">\n<title></title>\n```\n\n## Tests\n\n```npm test``` runs the mocha tests\n\n```npm run-script coverage``` runs the tests and reports code coverage\n\n## Contributing\n\nContributions welcome! All contibutions should use [bluebird promises](https://github.com/petkaantonov/bluebird) instead of callbacks,\nand be .nodeify()-ed in index.js so the functions can be used as either callbacks or Promises.\n\n",
  "readmeFilename": "README.md",
  "_id": "html-metadata@1.2.1",
  "dist": {
    "shasum": "f9e9969e9dd5f4d14936291253ed75f3d8200752"
  },
  "_from": "html-metadata@1.2.1",
  "_resolved": "https://registry.npmjs.org/html-metadata/-/html-metadata-1.2.1.tgz"
}
