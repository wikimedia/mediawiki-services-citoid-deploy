{
  "name": "html-metadata",
  "version": "0.1.1",
  "description": "Scrapes metadata of several different standards",
  "main": "index.js",
  "dependencies": {
    "async": "0.9.0",
    "cheerio": "0.18.0",
    "microdata-node": "0.1.2",
    "request": "2.49.0"
  },
  "devDependencies": {
    "mocha": "~1.x.x",
    "mocha-jshint": "0.0.9",
    "istanbul": "0.3.5",
    "mocha-lcov-reporter": "0.0.1"
  },
  "scripts": {
    "test": "mocha",
    "coverage": "istanbul cover _mocha -- -R spec"
  },
  "keywords": [
    "open graph",
    "metadata",
    "microdata",
    "dublin core",
    "web scraper"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/wikimedia/html-metadata.git"
  },
  "author": {
    "name": "Marielle Volz",
    "email": "marielle.volz@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/wikimedia/html-metadata/issues"
  },
  "homepage": "https://github.com/wikimedia/html-metadata",
  "readme": "html-metadata\n=============\n\n# MetaData html scraper and parser for Node.js\n\nThe aim of this library is to be a comprehensive source for extracting all html embedded metadata. Currently it supports Schema.org microdata using third party libraries, a native Dublin Core and Open Graph implementation, and some general metadata that doesn't belong to a particular standard (for instance, the content of the title tag, or meta description tags).\n\nPlanned is support for  RDFa , twitter, AGLS, eprints, highwire, BEPress and other yet unheard of metadata types. Contributions and requests for other metadata types welcome!\n\n## Install\n\n\tnpm install git://github.com/mvolz/html-metadata.git\n\n## Usage\n\n```js\nvar scrape = require('html-metadata');\n\nvar url = \"http://blog.woorank.com/2013/04/dublin-core-metadata-for-seo-and-usability/\";\n\nscrape(url, function(err, meta){\n\tconsole.log(meta);\n})\n```\n\nThe scrape method used here invokes the parseAll() method, which uses all the available methods registered in method metadataFunctions(), and are available for use separately as well, for example:\n\n```js\nvar cheerio = require('cheerio');\nvar request = require('request');\nvar dublinCore = require('html-metadata').parseDublinCore;\n\nvar url = \"http://blog.woorank.com/2013/04/dublin-core-metadata-for-seo-and-usability/\";\n\nrequest(url, function(error, response, html){\n\t$ = cheerio.load(html);\n\tdublinCore($, function(err, results){\n\t\tconsole.log(results);\n\t});\n});\n```\n\nThe method parseGeneral obtains the following general metadata:\n\n```html\n<meta name=\"author\" content=\"\">\n<link rel=\"author\" href=\"\">\n<link rel=\"canonical\" href=\"\">\n<meta name =\"description\" content=\"\">\n<link rel=\"publisher\" href=\"\">\n<meta name =\"robots\" content=\"\">\n<link rel=\"shortlink\" href=\"\">\n<title></title>\n```",
  "readmeFilename": "README.md",
  "_id": "html-metadata@0.1.1",
  "dist": {
    "shasum": "2b6274ce85157293763f6e19d11d15ccb5624f9d"
  },
  "_from": "html-metadata@0.1.1",
  "_resolved": "https://registry.npmjs.org/html-metadata/-/html-metadata-0.1.1.tgz"
}
